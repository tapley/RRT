/// <reference path="../typings/react/react-global.d.ts" />
/// <reference path="../typings/jquery/jquery.d.ts" />

interface IC9Comment extends React.Props<C9Comment> {
  text: string;
  author: string;
}

class C9Comment extends React.Component<IC9Comment, {}> {
  render() {
    return (
      <div className="comment">
        <h2 className="commentAuthor">
          {this.props.author}
        </h2>
        {this.props.text}
      </div>
    );
  }
};

class C9CommentBox extends React.Component<any, any> {
  constructor() {
    super();
    this.state = { data: [] };
  };
  componentDidMount(){
    this.loadCommentsFromServer();
    setInterval(this.loadCommentsFromServer.bind(this), this.props.pollInterval);
  };
  render() {
    return (
      <div className="commentBox">
        <h1>TypeScript Comments</h1>
        <C9CommentList data={this.state.data} />
        <C9CommentForm onCommentSubmit={this.handleCommentSubmit.bind(this)} />
      </div>
    )
  };
  loadCommentsFromServer() {
    $.ajax({
      url: this.props.url,
      dataType: 'json',
      cache: false,
      success: function(data) {
        this.setState({data: data});
      }.bind(this),
      error: function(xhr, status, err) {
        console.error(this.props.url, status, err.toString());
      }.bind(this)
    });
  };
  handleCommentSubmit(comment) {
    let comments = this.state.data;
    // Optimistically set an id on the new comment. It will be replaced by an
    // id generated by the server. In a production application you would likely
    // not use Date.now() for this and would have a more robust system in place.
    comment.id = Date.now();
    let newComments = comments.concat([comment]);
    this.setState({data: newComments});
    $.ajax({
      url: this.props.url,
      dataType: 'json',
      type: 'POST',
      data: comment,
      success: function(data) {
        this.setState({data: data});
      }.bind(this),
      error: function(xhr, status, err) {
        this.setState({ data: comments });
        console.error(this.props.url, status, err.toString());
      }.bind(this)
    });
  };
}















class C9CommentList extends React.Component<any, any> {
  render() {

    var commentNodes = this.props.data.map(function(comment) {
      return (
        <C9Comment key={comment.id} text={comment.text} author={comment.author} />
      );
    });

    return (
      <div className="commentList">
        {commentNodes}
      </div>
    );
  }
};

class C9CommentForm extends React.Component<any, any> {

  constructor() {
    super()
    this.state = { author: '', text: '' }
  }
  handleAuthorChange(e) {
    this.setState({author: e.target.value});
  };
  handleTextChange(e) {
    this.setState({text: e.target.value});
  };
  handleSubmit(e) {
    e.preventDefault();
    let author = this.state.author.trim();
    let text = this.state.text.trim();
    if (!text || !author) {
      return;
    }
    this.props.onCommentSubmit({ author: author, text: text })
    this.setState({author: '', text: ''});
  };
  render() {
    return (
      <form className="commentForm" onSubmit={this.handleSubmit.bind(this)}>
        <input
          type="text"
          placeholder="Your name"
          value={this.state.author}
          onChange={this.handleAuthorChange.bind(this)}
        />
        <input
          type="text"
          placeholder="Say something..."
          value={this.state.text}
          onChange={this.handleTextChange.bind(this)}
        />
        <input type="submit" value="Post" />
      </form>
    );
  }
};

ReactDOM.render(
  <C9CommentBox url="/api/comments" pollInterval={3000} />,
  document.getElementById('content')
);
























